#!/bin/sh

# ----------------------------------------------------------------------------
# Copyright 2012 Red Hat, Inc. and/or its affiliates.
#
# Licensed under the Eclipse Public License version 1.0, available at
# http://www.eclipse.org/legal/epl-v10.html
# ----------------------------------------------------------------------------



# ----------------------------------------------------------------------
# Windup Startup script
#
# Required Environment vars:
# ------------------
#   JAVA_HOME - location of a JRE home directory
#
# Optional Environment Variables
# ------------------
#   WINDUP_HOME - location of Windup's installed home dir
#   WINDUP_OPTS - parameters passed to the Java VM when running Windup
#   MAX_MEMORY - Maximum Java Heap (example: 2048m)
#   MAX_PERM_SIZE - Maximum Permgen size (example: 256m)
#   RESERVED_CODE_CACHE_SIZE - Hotspot code cache size (example: 128m)
# -----------------------------------------------------------------------
ADDONS_DIR=""
WINDUP_DEBUG_ARGS=""
QUOTED_ARGS=""

while [ "$1" != "" ] ; do

  if [ "$1" = "--debug" ] ; then
    WINDUP_DEBUG_ARGS="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000"
  fi

  QUOTED_ARGS="$QUOTED_ARGS \"$1\""
  shift

done

if [ -f /etc/winduprc ] ; then
  . /etc/winduprc
fi

if [ -f "$HOME/.winduprc" ] ; then
  . "$HOME/.winduprc"
fi

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false;
darwin=false;
mingw=false
case "`uname`" in
  CYGWIN*) cygwin=true ;;
  MINGW*) mingw=true;;
  Darwin*) darwin=true
           if [ -z "$JAVA_VERSION" ] ; then
             JAVA_VERSION="1.7+"
           fi
           if [ -z "$JAVA_HOME" ] ; then
             JAVA_HOME="`/usr/libexec/java_home --version $JAVA_VERSION`"
           fi
           ;;
esac

if [ -z "$JAVA_HOME" ] ; then
  if [ -r /etc/gentoo-release ] ; then
    JAVA_HOME=`java-config --jre-home`
  fi
fi

if [ -z "$WINDUP_HOME" ] ; then
  ## resolve links - $0 may be a link to Windup's home
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  WINDUP_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  WINDUP_HOME=`cd "$WINDUP_HOME" && pwd`

  cd "$saveddir"
  echo Using Windup at $WINDUP_HOME
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin ; then
  [ -n "$WINDUP_HOME" ] &&
    WINDUP_HOME=`cygpath --unix "$WINDUP_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
fi

# For Migwn, ensure paths are in UNIX format before anything is touched
if $mingw ; then
  [ -n "$WINDUP_HOME" ] &&
    WINDUP_HOME="`(cd "$WINDUP_HOME"; pwd)`"
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
  # TODO classpath?
fi

if [ -z "$JAVACMD" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
    else
      JAVACMD="$JAVA_HOME/bin/java"
    fi
  else
    JAVACMD="`which java`"
  fi
fi

if [ ! -x "$JAVACMD" ] ; then
  echo "Error: JAVA_HOME is not defined correctly."
  echo "  We cannot execute $JAVACMD"
  exit 1
fi

JAVAVER=`"$JAVACMD" -version 2>&1`
case $JAVAVER in
*1.[7-9]*) ;;
*1.[1-6]*)
	echo " Error: a Java 1.7 or higher JRE is required to run Windup; found [$JAVACMD -version == $JAVAVER]."
	exit 1
 ;;
esac


if [ -z "$JAVA_HOME" ] ; then
  echo "Warning: JAVA_HOME environment variable is not set."
fi

WINDUP_MAIN_CLASS=org.jboss.windup.bootstrap.Bootstrap

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  [ -n "$WINDUP_HOME" ] &&
    WINDUP_HOME=`cygpath --path --windows "$WINDUP_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
  [ -n "$HOME" ] &&
    HOME=`cygpath --path --windows "$HOME"`
fi

# If there is update prepared (.update directory), copy files from it
if [ -e "$WINDUP_HOME/.update" ] ; then
  rm -rf $WINDUP_HOME/addons
  cp -rf $WINDUP_HOME/.update/addons $WINDUP_HOME/addons

  rm -rf $WINDUP_HOME/bin
  cp -rf $WINDUP_HOME/.update/bin $WINDUP_HOME/bin

  rm -rf $WINDUP_HOME/lib
  cp -rf $WINDUP_HOME/.update/lib $WINDUP_HOME/lib
  
  rm -rf $WINDUP_HOME/rules/migration-core
  cp -rf $WINDUP_HOME/.update/rules/* $WINDUP_HOME/rules
  
  rm -rf $WINDUP_HOME/.update
  echo "UPDATE IS COMPLETE. PLEASE RUN WINDUP AGAIN, EXITING NOW."
  exit 0
fi

#
if [ -r "$WINDUP_HOME/addons/" ] ; then
  ADDONS_DIR="--immutableAddonDir $WINDUP_HOME/addons/"
fi

if [ -z "$MAX_PERM_SIZE" ] ; then
  MAX_PERM_SIZE="256m"
fi

if [ -z "$RESERVED_CODE_CACHE_SIZE" ] ; then
  RESERVED_CODE_CACHE_SIZE="128m"
fi

if [ -z "$WINDUP_OPTS" ] ; then
  if [ -n "$MAX_MEMORY" ] ; then
    WINDUP_OPTS="-Xmx$MAX_MEMORY -XX:MaxPermSize=$MAX_PERM_SIZE -XX:ReservedCodeCacheSize=$RESERVED_CODE_CACHE_SIZE"
  else
    WINDUP_OPTS="-XX:MaxPermSize=$MAX_PERM_SIZE -XX:ReservedCodeCacheSize=$RESERVED_CODE_CACHE_SIZE"
  fi
fi

windup_exec_cmd="\"$JAVACMD\" $WINDUP_DEBUG_ARGS $WINDUP_OPTS \"-Dforge.standalone=true\" \"-Dforge.home=${WINDUP_HOME}\" \"-Dwindup.home=${WINDUP_HOME}\" \
   -cp \"${WINDUP_HOME}/lib/*\" $WINDUP_MAIN_CLASS"

eval $windup_exec_cmd "$QUOTED_ARGS" "$ADDONS_DIR"

